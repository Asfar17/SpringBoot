Model Class:
@Entity
@Table(name="Customer")
public class Model {
@Id
@GeneratedValue(strategy=GenerationType.IDENTITY)
private int id;
private String firstname;
private String lastname;
private String email;
private int loyaltyPoints;
private String address;
public int getId() {
return id;
}
public void setId(int id) {
this.id = id;
}
public String getFirstname() {
return firstname;
}
public void setFirstname(String firstname) {
this.firstname = firstname;
}
public String getLastname() {
return lastname;
}
public void setLastname(String lastname) { this.lastname
= lastname;
}
public String getEmail() {
return email;
}
public void setEmail(String email) {
this.email = email;
}
public int getLoyaltyPoints() {
return loyaltyPoints;
}
public void setLoyaltyPoints(int loyaltyPoints) {
this.loyaltyPoints = loyaltyPoints;
}
public String getAddress() {
return address;
}
public void setAddress(String address) {
this.address = address;
}
}
Controller class:
@RestController
@RequestMapping("/customers")
public class Controller {
@Autowired
private serv customerService;
@PostMapping("/create")
public ResponseEntity<Model> createCustomer(@RequestBody Model customer) {
Model createdCustomer = customerService.createCustomer(customer);
return new ResponseEntity<>(createdCustomer, HttpStatus.CREATED);
}
@GetMapping("/get")
public ResponseEntity<List<Model>> getAllCustomers() {
List<Model> customers = customerService.getAllCustomers();
return new ResponseEntity<>(customers, HttpStatus.OK);
}
@GetMapping("/{id}")
public ResponseEntity<Model> getCustomerById(@PathVariable int id) { Model
customer = customerService.getCustomerById(id);
if (customer != null) {
return new ResponseEntity<>(customer, HttpStatus.OK);
} else {
return new ResponseEntity<>(HttpStatus.NOT_FOUND);
}
}
@PutMapping("/{id}")
public ResponseEntity<Model> updateCustomer(@PathVariable int id, @RequestBody Model updatedCustomer) {
Model customer = customerService.updateCustomer(id, updatedCustomer); if
(customer != null) {
return new ResponseEntity<>(customer, HttpStatus.OK);
} else {
return new ResponseEntity<>(HttpStatus.NOT_FOUND);
}
}
@DeleteMapping("/{id}")
public ResponseEntity<Void> deleteCustomer(@PathVariable int id) {
customerService.deleteCustomer(id);
return new ResponseEntity<>(HttpStatus.NO_CONTENT);
}
}
Service Class:
@Service
public class serv {
@Autowired
Repo customerRepo;
public Model createCustomer(Model customer) { return
customerRepo.save(customer);
}
public List<Model> getAllCustomers(){
return customerRepo.findAll();
}
public Model getCustomerById(int id) { return
customerRepo.findById(id).orElse(null);
}
public Model updateCustomer(int id, Model updatedCustomer) {
Model existingCustomer = customerRepo.findById(id).orElseGet(null); if(existingCustomer
!= null) {
return customerRepo.save(existingCustomer);
}
return null;
}
public void deleteCustomer(int id) {
customerRepo.deleteById(id);
}
}
Repo Interface:
 @Repository
public interface Repo extends JpaRepository<Model,Integer>{
}
application.properties:
spring.application.name=Exercise6 spring.datasource.url=
jdbc:mysql://localhost:3306/ex6
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database= mysql
spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto= update
****************************************6**************************************
Member.java:
@Entity
public class Member {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;
private String name;
private String email;
@ManyToOne
@JoinColumn(name = "club_id")
private Club club;
public Club getClub() {
return club;
}
public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public String getEmail() {
return email;
}
public void setEmail(String email) {
this.email = email;
}
public void setClub(Club club) {
this.club = club;
}
// Constructors, getters, and setters
}
Club.Java:
@Entity
public class Club {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;
private String name;
@OneToMany(mappedBy = "club", cascade = CascadeType.ALL)
private List<Member> members = new ArrayList<>();
public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public List<Member> getMembers() {
return members;
}
public void setMembers(List<Member> members) {
this.members = members;
}}
MemberService.java:
@Service
public class MemberService {
@Autowired
private MemberRepository memberRepository;
public List<Member> getAllMembers() {
return memberRepository.findAll();
}
// Other CRUD operations for members
}
ClubService.java:
@Service
public class ClubService {
@Autowired
private ClubRepository clubRepository;
public List<Club> getAllClubs() {
return clubRepository.findAll();
}

public void enrollMember(Long clubId, Member member) {
Club club = clubRepository.findById(clubId).orElseThrow(() -> new RuntimeException("Club not found"));
member.setClub(club);
club.getMembers().add(member);
clubRepository.save(club);
}
}
MemberController.java:
@RestController
@RequestMapping("/api/members")
public class MemberController {
@Autowired
private MemberService memberService;
@GetMapping
public List<Member> getAllMembers() {
return memberService.getAllMembers();
}

}
ClubController.java:
package com.example.pipe;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired; import
org.springframework.web.bind.annotation.GetMapping; import
org.springframework.web.bind.annotation.PathVariable; import
org.springframework.web.bind.annotation.PostMapping; import
org.springframework.web.bind.annotation.RequestBody; import
org.springframework.web.bind.annotation.RequestMapping; import
org.springframework.web.bind.annotation.RestController;
@RestController
@RequestMapping("/api/clubs")
public class ClubController {
@Autowired
private ClubService clubService;
@GetMapping
public List<Club> getAllClubs() {
return clubService.getAllClubs();
}
@PostMapping("/{clubId}/enroll")
public void enrollMember(@PathVariable Long clubId, @RequestBody Member member) {
clubService.enrollMember(clubId, member);
}
}
MemberRepository.java:
public interface MemberRepository extends JpaRepository<Member, Long> {
}
ClubRepository.java:
public interface ClubRepository extends JpaRepository<Club, Long> {
}
Application.properties:
spring.application.name=lab
spring.datasource.url= jdbc:mysql://localhost:3306/modellab
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database= mysql
spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto= update
****************************************7**************************************
MODEL CLASS:
1) Patient.java
@Entity
public class Patient {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long patientId;
private String name; private
String dateOfBirth;
private String contactNumber;
private String issue;
public Long getPatientId() {
return patientId;
}
public void setPatientId(Long patientId) {
this.patientId = patientId;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public String getDateOfBirth() {
return dateOfBirth;
}
public void setDateOfBirth(String dateOfBirth) {
this.dateOfBirth = dateOfBirth;
}
public String getContactNumber() {
return contactNumber;
}
public void setContactNumber(String contactNumber) {
this.contactNumber = contactNumber;
}
public String getIssue() {
return issue;
}
public void setIssue(String issue) {
this.issue = issue;
}
}
2) Doctor.java
@Entity
public class Doctor {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long doctorId;
private String name;
private String specialty;
// Getters and setters
public Long getDoctorId() {
return doctorId;
}
public void setDoctorId(Long doctorId) {
this.doctorId = doctorId;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public String getSpecialty() {
return specialty;
}
public void setSpecialty(String specialty) {
this.specialty = specialty;
}
}
3) Appointment.java
@Entity
public class Appointment {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long appointmentId;
private String date;
private String time;
@ManyToOne @JoinColumn(name =
"patient_id") private Patient patient;
@ManyToOne @JoinColumn(name =
"doctor_id") private Doctor doctor;
public Long getAppointmentId() {
return appointmentId;
}
public void setAppointmentId(Long appointmentId) {
this.appointmentId = appointmentId;
}
public String getDate() {
return date;
}
public void setDate(String date) {
this.date = date;
}
public String getTime() {
return time;
}
public void setTime(String time) {
this.time = time;
}
public Patient getPatient() {
return patient;
}
public void setPatient(Patient patient) {
this.patient = patient;
}
public Doctor getDoctor() {
return doctor;
}
public void setDoctor(Doctor doctor) {
this.doctor = doctor;
}
}
SERVICE
1) PatientService.java
@Service
public class PatientService {
@Autowired
private PatientRepository patientRepository;
public Patient createPatient(Patient patient) {
return patientRepository.save(patient);
}
public List<Patient> getAllPatients() {
return patientRepository.findAll();
}
public Patient getPatientById(Long id) {
return patientRepository.findById(id).orElse(null);
}
public Patient updatePatient(Long id, Patient newPatientData) { Patient
existingPatient = patientRepository.findById(id).orElse(null); if
(existingPatient != null) {
existingPatient.setName(newPatientData.getName()); existingPatient.setDateOfBirth(newPatientData.getDateOfBirth());
existingPatient.setContactNumber(newPatientData.getContactNumber());
existingPatient.setIssue(newPatientData.getIssue());
return patientRepository.save(existingPatient);
}
return null;
}
public void deletePatient(Long id) {
patientRepository.deleteById(id);
}
}
2) DoctorService.java
@Service
public class DoctorService {
@Autowired
private DoctorRepository doctorRepository;
public Doctor createDoctor(Doctor doctor) {
return doctorRepository.save(doctor);
}
public List<Doctor> getAllDoctors() {
return doctorRepository.findAll();
}
public Doctor getDoctorById(Long id) {
return doctorRepository.findById(id).orElse(null);
}
public Doctor updateDoctor(Long id, Doctor newDoctorData) { Doctor
existingDoctor = doctorRepository.findById(id).orElse(null); if
(existingDoctor != null) {
existingDoctor.setName(newDoctorData.getName());
existingDoctor.setSpecialty(newDoctorData.getSpecialty());
return doctorRepository.save(existingDoctor);
}
return null;
}
public void deleteDoctor(Long id) {
doctorRepository.deleteById(id);
}
}
3) AppointmentService.java
@Service
public class AppointmentService {
@Autowired
private AppointmentRepository appointmentRepository;
public Appointment scheduleAppointment(Appointment appointment) {
return appointmentRepository.save(appointment);
}
public List<Appointment> getAllAppointments() {
return appointmentRepository.findAll();
}
public Appointment getAppointmentById(Long id) {
Optional<Appointment> appointmentOptional = appointmentRepository.findById(id);
return appointmentOptional.orElse(null);
}
public Appointment rescheduleAppointment(Long id, String newDate, String newTime) {
Optional<Appointment> appointmentOptional = appointmentRepository.findById(id); if
(appointmentOptional.isPresent()) {
Appointment existingAppointment = appointmentOptional.get();
existingAppointment.setDate(newDate);
existingAppointment.setTime(newTime);
return appointmentRepository.save(existingAppointment);
}
return null; // Or throw an exception indicating appointment not found
}
public void cancelAppointment(Long id) {
appointmentRepository.deleteById(id);
}
}
REPOSITORY
1) PateintRepository.java
@Repository
public interface PatientRepository extends JpaRepository<Patient, Long> {
}
2) DoctorRepository.java
@Repository
public interface DoctorRepository extends JpaRepository<Doctor, Long> {
}
3) AppointmentRepository.java
@Repository
public interface AppointmentRepository extends JpaRepository<Appointment, Long> {
}
CONTROLLER
1) PatientController.java
@RestController
@RequestMapping("/patient")
public class PatientController {
@Autowired
private PatientService patientService;
@PostMapping
public Patient createPatient(@RequestBody Patient patient) {
return patientService.createPatient(patient);
}
@GetMapping
public List<Patient> getAllPatients() {
return patientService.getAllPatients();
}
@GetMapping("/{id}")
public Patient getPatientById(@PathVariable Long id) {
return patientService.getPatientById(id);
}
@PutMapping("/{id}")
public Patient updatePatient(@PathVariable Long id, @RequestBody Patient newPatientData) { return
patientService.updatePatient(id, newPatientData);
}
@DeleteMapping("/{id}")
public void deletePatient(@PathVariable Long id) {
patientService.deletePatient(id);
}
}
2) DoctorController.java
@RestController
@RequestMapping("/doctors")
public class DoctorController {
@Autowired
private DoctorService doctorService;
@PostMapping
public Doctor createDoctor(@RequestBody Doctor doctor) {
return doctorService.createDoctor(doctor);
}
@GetMapping
public List<Doctor> getAllDoctors() {
return doctorService.getAllDoctors();
}
@GetMapping("/{id}")
public Doctor getDoctorById(@PathVariable Long id) {
return doctorService.getDoctorById(id);
}
@PutMapping("/{id}")
public Doctor updateDoctor(@PathVariable Long id, @RequestBody Doctor newDoctorData) { return
doctorService.updateDoctor(id, newDoctorData);
}
@DeleteMapping("/{id}")
public void deleteDoctor(@PathVariable Long id) {
doctorService.deleteDoctor(id);
}
}
3) AppointmentController.java
@RestController
@RequestMapping("/appointments")
public class AppointmentController {
@Autowired
private AppointmentService appointmentService;
@PostMapping
public Appointment scheduleAppointment(@RequestBody Appointment appointment) { return
appointmentService.scheduleAppointment(appointment);
}
@GetMapping
public List<Appointment> getAllAppointments() {
return appointmentService.getAllAppointments();
}
@GetMapping("/{id}")
public Appointment getAppointmentById(@PathVariable Long id) {
return appointmentService.getAppointmentById(id);
}
@PutMapping("/{id}/reschedule")
public Appointment rescheduleAppointment(@PathVariable Long id, @RequestParam String newDate, @RequestParam
String newTime) {
return appointmentService.rescheduleAppointment(id, newDate, newTime);
}
@DeleteMapping("/{id}")
public void cancelAppointment(@PathVariable Long id) {
appointmentService.cancelAppointment(id);
}
}
****************************************8**************************************
Model:
@Entity
@Table(name="Marks")
public class Model {
@Id
@GeneratedValue(strategy=GenerationType.IDENTITY)
private int id;
private String name,email;
private int age;
public String getEmail() {
return email;
}
public void setEmail(String email) {
this.email = email;
}
public int getAge() {
return age;
}
public void setAge(int age) {
this.age = age;
}
public int getId() {
return id;
}
public void setId(int id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
}
Controller:
@RestController
public class Controller {
@Autowired
public service s;
@GetMapping("/get")
public List<Model> getdata(){
return s.getall();
}
@GetMapping("/viewbyraw/{searchid}")
public List<Model> viewbyraw(@PathVariable int searchid){
return s.findid(searchid);
}
@PostMapping("/save")
public String save(@RequestBody Model m) { s.add(m);
return "added";
}
@PutMapping("/update/{id}")
public ResponseEntity<Model> updateuser(@PathVariable int id,@RequestBody Model m){
m.setId(id);
return s.updateuser(m);
}
@DeleteMapping("/delete/{id}")
public String deleteuser(@PathVariable int id){ return
s.delete(id);
}
}
Repo:
@Repository
public interface Repo extends JpaRepository<Model,Integer>{
@Query("select e from Model e where e.id = :searchid")
List<Model> find(int searchid);
}
service:
@Service
public class service {
@Autowired
public Repo r;
public List<Model> getall() {
return r.findAll();
}
public String add(Model m) {
r.save(m);
return "Added";
}
public List<Model> findid(int searchid){
return r.find(searchid);
}
public ResponseEntity<Model> updateuser( Model m) {
r.save(m);
return ResponseEntity.ok(m);
}
public String delete(int id){
r.deleteById(id);
return "Successfully deleted";
}
}
Application Property :
spring.application.name=UserEntity
spring.datasource.url=jdbc:mysql://localhost:3306/entity
spring.datasource.username=root
spring.datasource.password=mysql
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.database=mysql
spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
****************************************9**************************************
MODEL:
@Entity
@Table(name = "vehicles")
public class Vehicle {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;
private String make;
private String model;
private String vin;
private int yearOfManufacture;
private String color;
private double price; public
Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public String getMake() {
return make;
}
public void setMake(String make) {
this.make = make;
}
public String getModel() {
return model;
}
public void setModel(String model) {
this.model = model;
}
public String getVin() {
return vin;
}
public void setVin(String vin) {
this.vin = vin;
}
public int getYearOfManufacture() {
return yearOfManufacture;
}
public void setYearOfManufacture(int yearOfManufacture) {
this.yearOfManufacture = yearOfManufacture;
}
public String getColor() {
return color;
}
public void setColor(String color) {
this.color = color;
}
public double getPrice() {
return price;
}
public void setPrice(double price) {
this.price = price;
}
}
CONTROLLER:
@RestController @RequestMapping("/vehicles")
@CrossOrigin(origins = "http://localhost:3000")
public class VehicleController {
@Autowired
private VehicleService vehicleService;
@GetMapping
public List<Vehicle> getAllVehicles() {
return vehicleService.getAllVehicles();
}
@GetMapping("/{id}")
public Vehicle getVehicleById(@PathVariable Long id) {
return vehicleService.getVehicleById(id);
}
@PostMapping
public Vehicle saveVehicle(@RequestBody Vehicle vehicle) {
return vehicleService.saveVehicle(vehicle);
}
@PutMapping("/{id}")
public Vehicle updateVehicle(@PathVariable Long id, @RequestBody Vehicle updatedVehicle) { return
vehicleService.updateVehicle(id, updatedVehicle);
}
@DeleteMapping("/{id}")
public void deleteVehicleById(@PathVariable Long id) {
vehicleService.deleteVehicleById(id);
}
}
REPO:
public interface VehicleRepository extends JpaRepository<Vehicle, Long>{
}
SERVICE
@Service
public class VehicleService {
@Autowired
private VehicleRepository vehicleRepository;
public List<Vehicle> getAllVehicles() {
return vehicleRepository.findAll();
}
public Vehicle saveVehicle(Vehicle vehicle) {
return vehicleRepository.save(vehicle);
}
public Vehicle getVehicleById(Long id) {
return vehicleRepository.findById(id).orElse(null);
}
public void deleteVehicleById(Long id) {
vehicleRepository.deleteById(id);
}
public Vehicle updateVehicle(Long id, Vehicle updatedVehicle) {
Optional<Vehicle> optionalVehicle = vehicleRepository.findById(id); if
(optionalVehicle.isPresent()) {
Vehicle existingVehicle = optionalVehicle.get();
existingVehicle.setMake(updatedVehicle.getMake());
existingVehicle.setModel(updatedVehicle.getModel());
existingVehicle.setColor(updatedVehicle.getColor());
existingVehicle.setVin(updatedVehicle.getVin());
existingVehicle.setYearOfManufacture(updatedVehicle.getYearOfManufacture()); return
vehicleRepository.save(existingVehicle);
} else {
return null; // Or throw an exception, depending on your error handling strategy
}
}
}
****************************************10**************************************